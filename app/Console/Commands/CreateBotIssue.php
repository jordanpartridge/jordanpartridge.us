<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Http;

class CreateBotIssue extends Command
{
    protected $signature = 'issues:create-as-bot 
                            {title : Issue title}
                            {body : Issue body}
                            {--labels= : Comma-separated labels}';

    protected $description = 'Create GitHub issue using a bot account or GitHub App';

    public function handle()
    {
        $title = $this->argument('title');
        $body = $this->argument('body');
        $labels = $this->option('labels') ? explode(',', $this->option('labels')) : [];

        // Validate required configuration
        if (!config('services.github.repository')) {
            $this->error('GitHub repository not configured. Set GITHUB_REPOSITORY environment variable.');
            return Command::FAILURE;
        }

        // Validate that at least one authentication method is available
        if (
            !config('services.github.app_token')
            && !config('services.github.bot_token')
            && !\Illuminate\Support\Facades\Process::run(['which', 'gh'])->successful()
        ) {
            $this->error('No GitHub authentication method available. Configure tokens or install GitHub CLI.');
            return Command::FAILURE;
        }

        // Option 1: Use GitHub App (if configured)
        if (config('services.github.app_token')) {
            return $this->createIssueWithApp($title, $body, $labels);
        }

        // Option 2: Use Personal Access Token for bot account
        if (config('services.github.bot_token')) {
            return $this->createIssueWithBotToken($title, $body, $labels);
        }

        // Option 3: Create with attribution to indicate automation
        return $this->createIssueWithAttribution($title, $body, $labels);
    }

    protected function createIssueWithApp(string $title, string $body, array $labels): int
    {
        $this->info('Creating issue with GitHub App...');

        $response = Http::withHeaders([
            'Authorization' => 'Bearer ' . config('services.github.app_token'),
            'Accept'        => 'application/vnd.github.v3+json',
            'User-Agent'    => 'Laravel-Log-Analyzer-Bot',
        ])->timeout(30)
          ->retry(2, 1000)
          ->post('https://api.github.com/repos/' . config('services.github.repository') . '/issues', [
            'title'  => $title,
            'body'   => $body . "\n\n---\n*Created automatically by Laravel Log Analyzer Bot*",
            'labels' => $labels,
        ]);

        if ($response->successful()) {
            $issue = $response->json();
            $this->info("✅ Issue created: " . $issue['html_url']);
            return Command::SUCCESS;
        }

        $this->error("❌ Failed to create issue: " . $response->body());
        return Command::FAILURE;
    }

    protected function createIssueWithBotToken(string $title, string $body, array $labels): int
    {
        $this->info('Creating issue with bot account...');

        $response = Http::withHeaders([
            'Authorization' => 'Bearer ' . config('services.github.bot_token'),
            'Accept'        => 'application/vnd.github.v3+json',
            'User-Agent'    => 'Laravel-Log-Analyzer-Bot',
        ])->timeout(30)
          ->retry(2, 1000)
          ->post('https://api.github.com/repos/' . config('services.github.repository') . '/issues', [
            'title'  => $title,
            'body'   => $body . "\n\n---\n*Created by @laravel-log-bot*",
            'labels' => $labels,
        ]);

        if ($response->successful()) {
            $issue = $response->json();
            $this->info("✅ Issue created: " . $issue['html_url']);
            return Command::SUCCESS;
        }

        $this->error("❌ Failed to create issue: " . $response->body());
        return Command::FAILURE;
    }

    protected function createIssueWithAttribution(string $title, string $body, array $labels): int
    {
        $this->info('Creating issue with automation attribution...');

        // Validate that gh CLI is available
        if (!\Illuminate\Support\Facades\Process::run(['which', 'gh'])->successful()) {
            $this->error("GitHub CLI (gh) is not installed or not in PATH");
            return Command::FAILURE;
        }

        // Modify the body to clearly indicate it's automated
        $automatedBody = "🤖 **Automated Issue Report**\n\n" . $body;
        $automatedBody .= "\n\n---\n";
        $automatedBody .= "*This issue was automatically generated by Claude Code log analysis*\n";
        $automatedBody .= "*Timestamp: " . now()->toDateTimeString() . "*\n";
        $automatedBody .= "*Generated by: Laravel Log Analyzer*";

        $command = ['gh', 'issue', 'create'];
        
        // Add repository context for safety
        if (config('services.github.repository')) {
            $command[] = '--repo';
            $command[] = config('services.github.repository');
        }
        
        $command = array_merge($command, [
            '--title', '🤖 [AUTO] ' . $title,
            '--body', $automatedBody
        ]);

        // Only add labels if they were provided
        if (!empty($labels)) {
            $command[] = '--label';
            $command[] = implode(',', $labels);
        }

        $result = \Illuminate\Support\Facades\Process::run($command);

        if ($result->successful()) {
            $this->info("✅ Issue created: " . trim($result->output()));
            return Command::SUCCESS;
        }

        $this->error("❌ Failed to create issue: " . $result->errorOutput());
        return Command::FAILURE;
    }
}
