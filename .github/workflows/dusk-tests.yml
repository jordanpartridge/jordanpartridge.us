name: Dusk Tests

on:
  push:
    branches: [ "**" ]  # Run on all branches
  pull_request:
    branches: [ "**" ]  # Run on PRs to all branches
  # Allow manual trigger
  workflow_dispatch:

jobs:
  dusk-tests:
    runs-on: ubuntu-latest
    continue-on-error: true # Continue the workflow even if tests fail
    
    services:
      # MySQL service
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: test_jordanpartridge
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      # Redis service
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, gd, redis
        coverage: none
    
    - name: Get Composer Cache Directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
    
    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-
    
    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-interaction --no-progress
    
    - name: Prepare Laravel Environment
      run: |
        php -r "file_exists('.env') || copy('.env.example', '.env');"
        php artisan key:generate
        
        # Update environment settings
        sed -i "s/APP_URL=.*/APP_URL=http:\/\/127.0.0.1:8000/" .env
        sed -i "s/DB_DATABASE=.*/DB_DATABASE=test_jordanpartridge/" .env
        sed -i "s/DB_USERNAME=.*/DB_USERNAME=root/" .env
        sed -i "s/DB_PASSWORD=.*/DB_PASSWORD=/" .env
        
        # Run migrations
        php artisan migrate:fresh --seed --force
    
    # Install Chrome
    - name: Install Chrome
      run: |
        sudo apt-get update
        sudo apt-get install -y libnss3 libgbm1 google-chrome-stable
        google-chrome --version
    
    # Install Dusk and set up ChromeDriver
    - name: Install Dusk
      run: php artisan dusk:install
    
    # Fix ChromeDriver version
    - name: Downgrade Chrome Driver to version 126 (workaround for recent bug)
      run: php artisan dusk:chrome-driver 126
    
    # Make ChromeDriver executable
    - name: Set permissions for ChromeDriver
      run: chmod -R 0755 vendor/laravel/dusk/bin/
    
    # Verify ChromeDriver exists
    - name: Verify ChromeDriver binaries
      run: |
        if [ ! -f vendor/laravel/dusk/bin/chromedriver-linux ]; then
          ln -sf vendor/laravel/dusk/bin/chromedriver-linux-x64 vendor/laravel/dusk/bin/chromedriver-linux
        fi
        ls -la vendor/laravel/dusk/bin/
    
    # Start Chrome Driver with increased timeout
    - name: Start Chrome Driver
      run: |
        ./vendor/laravel/dusk/bin/chromedriver-linux > /dev/null 2>&1 &
        echo "Started ChromeDriver, sleeping for 5 seconds..."
        sleep 5
    
    # Start Laravel Server
    - name: Run Laravel Server
      run: |
        php artisan serve --no-reload &
        echo "Started Laravel server, sleeping for 5 seconds..."
        sleep 5
    
    # Verify server is running
    - name: Check if server is running
      run: |
        curl -I http://127.0.0.1:8000 || echo "Server not responding"
    
    # Modify DuskTestCase to debug the issue
    - name: Update DuskTestCase for debugging
      run: |
        cat > tests/DuskTestCase.php << 'EOL'
        <?php
        
        namespace Tests;
        
        use Facebook\WebDriver\Chrome\ChromeOptions;
        use Facebook\WebDriver\Remote\DesiredCapabilities;
        use Facebook\WebDriver\Remote\RemoteWebDriver;
        use Laravel\Dusk\TestCase as BaseTestCase;
        use PHPUnit\Framework\Attributes\BeforeClass;
        
        abstract class DuskTestCase extends BaseTestCase
        {
            /**
             * Prepare for Dusk test execution.
             */
            #[BeforeClass]
            public static function prepare(): void
            {
                if (!isset($_ENV['CI'])) {
                    // Only start ChromeDriver if we're not in a CI environment
                    static::startChromeDriver();
                }
            }
        
            /**
             * Create the RemoteWebDriver instance.
             */
            protected function driver(): RemoteWebDriver
            {
                $options = (new ChromeOptions)->addArguments([
                    '--window-size=1920,1080',
                    '--disable-gpu',
                    '--headless=new',
                    '--no-sandbox',
                    '--disable-dev-shm-usage',
                ]);
        
                return RemoteWebDriver::create(
                    'http://localhost:9515',
                    DesiredCapabilities::chrome()->setCapability(
                        ChromeOptions::CAPABILITY,
                        $options
                    )
                );
            }
        }
        EOL
    
    # Use a simple test file to verify if Dusk is working
    - name: Create a simple Dusk test
      run: |
        cat > tests/Browser/SimpleTest.php << 'EOL'
        <?php
        
        namespace Tests\Browser;
        
        use Laravel\Dusk\Browser;
        use Tests\DuskTestCase;
        
        class SimpleTest extends DuskTestCase
        {
            public function testBasicExample()
            {
                $this->browse(function (Browser $browser) {
                    $browser->visit('/')
                            ->assertSee('Laravel');
                });
            }
        }
        EOL
    
    # Run Dusk Tests with verbose output
    - name: Run Dusk Tests
      env:
        APP_URL: "http://127.0.0.1:8000"
        CI: true
      run: php artisan dusk tests/Browser/SimpleTest.php --verbose
    
    # Upload Screenshots on Failure
    - name: Upload Screenshots
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: screenshots
        path: tests/Browser/screenshots
    
    # Upload Console Logs on Failure
    - name: Upload Console Logs
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: console
        path: tests/Browser/console
