name: Tests

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  laravel-tests:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: jordanpartridge_testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping -h localhost -p3306" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
    - uses: actions/checkout@v3
    - uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: mbstring, xml, ctype, iconv, mysql
    - name: Setup environments
      run: |
        php -r "file_exists('.env') || copy('.env.example', '.env');"
        echo "DB_CONNECTION=mysql" >> .env
        echo "DB_DATABASE=jordanpartridge_testing" >> .env
        echo "DB_PORT=3306" >> .env
        echo "CACHE_DRIVER=array" >> .env
        echo "QUEUE_CONNECTION=sync" >> .env
        echo "SESSION_DRIVER=array" >> .env
        echo "DB_HOST=127.0.0.1" >> .env
        echo "DB_USERNAME=root" >> .env
        echo "DB_PASSWORD=password" >> .env
        echo "OPENAI_API_KEY=${{ secrets.OPEN_AI_API_KEY }}" >> .env
        echo "CARD_API_BASE_URL=${{ secrets.CARD_API_BASE_URL }}" >> .env
        echo "CARD_API_KEY=${{ secrets.CARD_API_KEY }}" >> .env
        php -r "file_exists('.env.testing') || copy('.env', '.env.testing');"

    - name: Install Dependencies
      run: |
        composer install -n --prefer-dist
        npm install
        npm run build
    - name: Generate key
      run: php artisan key:generate
    - name: Generate test key
      run: php artisan key:generate --env=testing
    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache
    - name: Migrate the damn database
      run: php artisan migrate
    - name: Execute tests (Unit and Feature tests) via PHPUnit/Pest
      run: php artisan test --parallel
    
    - name: Install Google Chrome and dependencies
      run: |
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable jq
    
    - name: Setup ChromeDriver
      run: |
        CHROME_VERSION=$(google-chrome --version | cut -d " " -f3)
        echo "Chrome version: $CHROME_VERSION"
        
        # For Chrome 115+, use Chrome for Testing API
        if [[ $(echo "$CHROME_VERSION" | cut -d. -f1) -ge 115 ]]; then
          echo "Using Chrome for Testing API for Chrome 115+"
          CHROMEDRIVER_URL=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json" | \
            jq -r ".versions[] | select(.version==\"$CHROME_VERSION\") | .downloads.chromedriver[] | select(.platform==\"linux64\") | .url" | head -1)
          
          if [ -z "$CHROMEDRIVER_URL" ]; then
            echo "Exact version not found, using latest stable"
            CHROMEDRIVER_URL=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions.json" | \
              jq -r '.channels.Stable.downloads.chromedriver[] | select(.platform=="linux64") | .url')
          fi
          
          echo "Downloading ChromeDriver from: $CHROMEDRIVER_URL"
          wget -O /tmp/chromedriver_linux64.zip "$CHROMEDRIVER_URL"
        else
          echo "Using legacy ChromeDriver API for Chrome < 115"
          CHROME_VERSION_SHORT=$(echo "$CHROME_VERSION" | cut -d "." -f1-3)
          CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_VERSION_SHORT")
          wget -N "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip" -P /tmp/
        fi
        
        unzip /tmp/chromedriver_linux64.zip -d /tmp/
        sudo mv /tmp/chromedriver /usr/local/bin/chromedriver
        sudo chmod +x /usr/local/bin/chromedriver
        chromedriver --version
    
    - name: Start Laravel Server
      run: php artisan serve --host=127.0.0.1 --port=8000 &
      env:
        APP_ENV: testing
    
    - name: Wait for server to be ready
      run: |
        timeout 30 bash -c 'until curl -f http://127.0.0.1:8000; do sleep 1; done'
    
    - name: Run Dusk Tests
      run: php artisan dusk --env=testing
      env:
        APP_URL: http://127.0.0.1:8000
