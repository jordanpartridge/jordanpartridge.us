name: CI Pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  # Unit and Feature Tests
  pest-tests:
    name: Unit & Feature Tests (PHP ${{ matrix.php-version }})
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        php-version: [8.4]

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: jordanpartridge_testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Setup PHP ${{ matrix.php-version }}
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, xml, ctype, iconv, mysql, gd, zip
        coverage: xdebug

    - name: Cache Composer Dependencies
      uses: actions/cache@v4
      with:
        path: vendor
        key: composer-${{ runner.os }}-${{ matrix.php-version }}-${{ hashFiles('composer.lock') }}
        restore-keys: composer-${{ runner.os }}-${{ matrix.php-version }}-

    - name: Cache Node Dependencies
      uses: actions/cache@v4
      with:
        path: node_modules
        key: node-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
        restore-keys: node-${{ runner.os }}-

    - name: Setup Environment
      run: |
        cp .env.example .env
        echo "DB_CONNECTION=mysql" >> .env
        echo "DB_DATABASE=jordanpartridge_testing" >> .env
        echo "DB_PORT=3306" >> .env
        echo "DB_HOST=127.0.0.1" >> .env
        echo "DB_USERNAME=root" >> .env
        echo "DB_PASSWORD=password" >> .env
        echo "OPENAI_API_KEY=${{ secrets.OPEN_AI_API_KEY }}" >> .env
        echo "CARD_API_BASE_URL=${{ secrets.CARD_API_BASE_URL }}" >> .env
        echo "CARD_API_KEY=${{ secrets.CARD_API_KEY }}" >> .env

    - name: Install Dependencies
      run: |
        composer install --no-interaction --prefer-dist --optimize-autoloader
        npm ci
        npm run build

    - name: Generate Application Keys
      run: |
        php artisan key:generate
        php artisan key:generate --env=testing

    - name: Set Permissions
      run: chmod -R 777 storage bootstrap/cache

    - name: Run Database Migrations
      run: php artisan migrate --force

    - name: Run Pest Tests
      run: php artisan test --parallel --coverage-clover=coverage.xml

    - name: Upload Coverage to Codecov
      if: matrix.php-version == '8.4'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  # Browser Tests (only run if unit tests pass)
  dusk-tests:
    name: Browser Tests (Dusk)
    runs-on: ubuntu-latest
    needs: pest-tests
    timeout-minutes: 30

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: jordanpartridge_testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5
      
      selenium:
        image: selenium/standalone-chrome:latest
        ports:
          - 4444:4444
        options: --shm-size=2gb

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup PHP 8.4
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: mbstring, xml, ctype, iconv, mysql, gd, zip
        coverage: none

    - name: Cache Composer Dependencies
      uses: actions/cache@v4
      with:
        path: vendor
        key: composer-${{ runner.os }}-8.4-${{ hashFiles('composer.lock') }}
        restore-keys: composer-${{ runner.os }}-8.4-

    - name: Cache Node Dependencies
      uses: actions/cache@v4
      with:
        path: node_modules
        key: node-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
        restore-keys: node-${{ runner.os }}-

    - name: Install Dependencies
      run: |
        composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev
        npm ci
        npm run build

    - name: Setup Environment for Dusk
      run: |
        cp .env.dusk.ci .env
        echo "APP_URL=http://127.0.0.1:8000" >> .env
        echo "DB_CONNECTION=mysql" >> .env
        echo "DB_DATABASE=jordanpartridge_testing" >> .env
        echo "DB_PORT=3306" >> .env
        echo "DB_HOST=127.0.0.1" >> .env
        echo "DB_USERNAME=root" >> .env
        echo "DB_PASSWORD=password" >> .env
        echo "DUSK_DRIVER_URL=http://127.0.0.1:4444/wd/hub" >> .env
        echo "OPENAI_API_KEY=${{ secrets.OPEN_AI_API_KEY }}" >> .env
        echo "CARD_API_BASE_URL=${{ secrets.CARD_API_BASE_URL }}" >> .env
        echo "CARD_API_KEY=${{ secrets.CARD_API_KEY }}" >> .env

    - name: Generate Application Keys
      run: |
        php artisan key:generate
        php artisan key:generate --env=testing

    - name: Set Directory Permissions
      run: chmod -R 777 storage bootstrap/cache

    - name: Run Database Migrations
      run: php artisan migrate --force

    - name: Wait for Selenium
      run: |
        echo "Waiting for Selenium to be ready..."
        for i in {1..30}; do
          if curl -f http://127.0.0.1:4444/wd/hub/status >/dev/null 2>&1; then
            echo "✅ Selenium is ready!"
            break
          fi
          echo "⏳ Waiting for Selenium... (attempt $i/30)"
          sleep 2
        done

    - name: Start Laravel Server
      run: |
        php artisan serve --host=127.0.0.1 --port=8000 &
        echo $! > server.pid
      env:
        APP_ENV: testing

    - name: Wait for Laravel Server
      run: |
        echo "Waiting for Laravel server..."
        for i in {1..30}; do
          if curl -f -s http://127.0.0.1:8000 >/dev/null 2>&1; then
            echo "✅ Laravel server is ready!"
            break
          fi
          echo "⏳ Waiting for server... (attempt $i/30)"
          sleep 2
        done

    - name: Verify Selenium Ready
      run: |
        echo "🔗 Testing Selenium connectivity..."
        curl -f http://127.0.0.1:4444/wd/hub/status
        echo "✅ Selenium is accessible"

    - name: Run Browser Tests
      run: |
        echo "🧪 Running Core Functionality Tests..."
        php artisan dusk tests/Browser/CoreFunctionalityTest.php
        
        echo "🧪 Running Performance Tests..."
        php artisan dusk tests/Browser/PerformanceTest.php
        
        echo "🧪 Running SEO Infrastructure Tests..."
        php artisan dusk tests/Browser/SEOInfrastructureTest.php
        
        echo "🧪 Running Error Handling Tests..."
        php artisan dusk tests/Browser/ErrorHandlingTest.php

    - name: Stop Laravel Server
      if: always()
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid) || echo "Server already stopped"
          rm server.pid
        fi

    - name: Upload Browser Test Artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: browser-test-artifacts
        path: |
          tests/Browser/screenshots/
          tests/Browser/console/
          storage/logs/laravel.log
        retention-days: 7

  # Code Quality Checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup PHP 8.4
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: mbstring, xml, ctype, iconv

    - name: Cache Composer Dependencies
      uses: actions/cache@v4
      with:
        path: vendor
        key: composer-${{ runner.os }}-8.4-${{ hashFiles('composer.lock') }}
        restore-keys: composer-${{ runner.os }}-8.4-

    - name: Install Dependencies
      run: composer install --no-interaction --prefer-dist --optimize-autoloader --dev

    - name: Run Pint (Code Style)
      run: ./vendor/bin/pint --test

    - name: Run Duster (Additional Checks)
      run: ./vendor/bin/duster lint