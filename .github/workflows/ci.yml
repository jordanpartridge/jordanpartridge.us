name: CI Pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  # Unit and Feature Tests
  pest-tests:
    name: Unit & Feature Tests (PHP ${{ matrix.php-version }})
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        php-version: [8.4]

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: jordanpartridge_testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Setup PHP ${{ matrix.php-version }}
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, xml, ctype, iconv, mysql, gd, zip
        coverage: xdebug

    - name: Cache Composer Dependencies
      uses: actions/cache@v4
      with:
        path: vendor
        key: composer-${{ runner.os }}-${{ matrix.php-version }}-${{ hashFiles('composer.lock') }}
        restore-keys: composer-${{ runner.os }}-${{ matrix.php-version }}-

    - name: Cache Node Dependencies
      uses: actions/cache@v4
      with:
        path: node_modules
        key: node-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
        restore-keys: node-${{ runner.os }}-

    - name: Setup Environment
      run: |
        cp .env.example .env
        echo "DB_CONNECTION=mysql" >> .env
        echo "DB_DATABASE=jordanpartridge_testing" >> .env
        echo "DB_PORT=3306" >> .env
        echo "DB_HOST=127.0.0.1" >> .env
        echo "DB_USERNAME=root" >> .env
        echo "DB_PASSWORD=password" >> .env
        echo "OPENAI_API_KEY=${{ secrets.OPEN_AI_API_KEY }}" >> .env
        echo "CARD_API_BASE_URL=${{ secrets.CARD_API_BASE_URL }}" >> .env
        echo "CARD_API_KEY=${{ secrets.CARD_API_KEY }}" >> .env

    - name: Install Dependencies
      run: |
        composer install --no-interaction --prefer-dist --optimize-autoloader
        npm ci
        npm run build

    - name: Generate Application Keys
      run: |
        php artisan key:generate
        php artisan key:generate --env=testing

    - name: Set Permissions
      run: chmod -R 777 storage bootstrap/cache

    - name: Run Database Migrations
      run: php artisan migrate --force

    - name: Run Pest Tests
      run: php artisan test --parallel --coverage-clover=coverage.xml

    - name: Upload Coverage to Codecov
      if: matrix.php-version == '8.4'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

